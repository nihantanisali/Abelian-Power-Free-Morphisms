#!/usr/bin/env python
###########################################################################
### Chapter 3 / Proposition 3.6 all results
###########################################################################


import numpy as np
from collections.abc import Sequence
from typing import Sequence, Tuple, Optional, List, TypeVar, Iterable
############################################################################
#This first part computes: Parents/Ancestors/Parikh vectors
############################################################################
# indices correspond to: 0->a, 1->b, 2->epsilon. 
h = ['0100010', '10101']
n = len(h)
k = 8

def parikh(s):  # Parikh vector of string s
    v = []
    for i in range(n):
        v.append(0)
        p = np.array(v)
    for i in range(len(s)):
        p[int(s[i])] = p[int(s[i])] + 1
    return p

def applyh(w):  # apply morphism f to w
    u = ''
    for i in range(len(w)):
        u = u + h[int(w[i])]
    return u

def applyh_iterative(w,k):
    for i in range(k):
        w=applyh(w)
    return w

def splits(h,n):
    S = []
    for i in range(n + 1):
        S.append([])
    S[n].append([n, parikh(''), parikh('')])
    for A in range(n):
        w = h[A]
        for i in range(len(w) + 1):
            S[n].append([A, parikh(w[:i]), parikh(w[i:])])
        for i in range(len(w)):
            S[int(w[i])].append([A, parikh(w[:i]), parikh(w[i + 1:])])     
    return S
S = splits(h,n)

def Con(x,y):
    z1=( 3*x - 2*y )/11
    if z1%1==0:
        z2=( -2*x+ 5*y )/11
        if z2%1==0:
            return ([z1,z2])    
    else :
        return 0 
    # S--->S[1] to avoid calculating the parikh vectors in each for loop in 'parents'

def parents(t):  # Finds the parents of a template t
    # 'parents' stores all arrays with possibly repetition, 'parentsnorep' is without repetiton which is what the function return
    par = []
    for A in S[t[0]]:
        for B in S[t[1]]:
            for C in S[t[2]]:
                s1p2 = A[2]+B[1]
                s2p3 = B[2]+C[1]
                v1 = np.array([t[9], t[10]]) - s2p3 + s1p2
                C1 = Con(v1[0], v1[1])
                if C1 != 0:
                    for D in S[t[3]]:
                        s3p4 = C[2]+D[1]
                        v2 = np.array([t[11], t[12]]) - s3p4 + s2p3
                        C2 = Con(v2[0], v2[1])
                        if C2 != 0:
                            for E in S[t[4]]:
                                s4p5 = D[2]+E[1]
                                v3 = np.array([t[13], t[14]]) - s4p5 + s3p4
                                C3 = Con(v3[0], v3[1])
                                if C3 != 0:
                                    for F in S[t[5]]:
                                        s5p6 = E[2]+F[1]
                                        v4 = np.array([t[15], t[16]]) - s5p6 + s4p5
                                        C4 = Con(v4[0], v4[1])
                                        if C4 != 0:
                                            for G in S[t[6]]:
                                                s6p7 = F[2]+G[1]
                                                v5 = np.array([t[17], t[18]]) - s6p7 + s5p6
                                                C5 = Con(v5[0], v5[1])
                                                if C5 != 0:
                                                    for H in S[t[7]]:
                                                        s7p8 = G[2]+H[1]
                                                        v6 = np.array([t[19], t[20]]) - s7p8 + s6p7
                                                        C6 = Con(v6[0], v6[1])
                                                        if C6 != 0:
                                                            for L in S[t[8]]:
                                                                s8p9 = H[2]+L[1]
                                                                v7 = np.array([t[21], t[22]]) - s8p9 + s7p8
                                                                C7 = Con(v7[0], v7[1])
                                                                if C7 != 0:
                                                                    par.append([A[0], B[0], C[0], D[0], E[0], F[0], G[0], H[0], L[0], 
                                                                                int(C1[0]), int(C1[1]), int(C2[0]), int(C2[1]), int(C3[0]), 
                                                                                int(C3[1]), int(C4[0]), int(C4[1]), int(C5[0]), int(C5[1]), 
                                                                                int(C6[0]), int(C6[1]), int(C7[0]), int(C7[1])])                                               
    par=set(map(tuple, par))
    par=list(par)
    return par

def ancestors_with_levels(T):
    level = 0
    V = set(map(tuple, T))   # V is the set that collects all the ancestors
    U = list(T)              # the set of ancestors at level i
    levels = [U]             # lists of the ancestors at different levels.
    while len(U) > 0:
        newtem = set()
        for u in U:
            newtem.update(map(tuple, parents(u)))
        newtem.difference_update(V)  # remove the ones that appeared before
        V.update(newtem)             # add new ancestors to the set V
        U = list(newtem)
        if U:
            level += 1
            print(f'at level {level} there are {len(U)} new templates.')
            levels.append(U)
    all_ancestors = list(V)
    return levels, all_ancestors

############################################################################
#This second part computes abelian power freenes, length of the blocks
# Blocks: big length---->small length more efficient for our purposes
############################################################################
def avoids_abelian_k_power(seq: str, k: int) -> bool:
    n = len(seq)

    # n // k →  the length of the longest possible block
    for block_len in range(n // k, 0, -1):             # ↓ big → small
        full_len = block_len * k                       # the length of the longest tested factor 
        for start in range(n - full_len + 1):
            # the first block used as a 'template' 
            tpl = sorted(seq[start : start + block_len])

            # checks whether the other (k-1) block is a permutation of the first one.
            if all(
                sorted(seq[start + j*block_len : start + (j+1)*block_len]) == tpl
                for j in range(1, k)
            ):      
                return False ,[start, full_len, seq[start: full_len] ]                      # found abelian k-power 

    return True   , []                                    # found none 
############################################################################
#This third part checks template realization
############################################################################

############################################################################
#Formating of template  (a_0,...,a_9, D_1,...,D_7 )
############################################################################
U = TypeVar("U")                       
def split_9_then_pairs(seq: Sequence[U]) -> Tuple[U | Tuple[U, U], ...]:
    if len(seq) != 23:
        raise ValueError("Input must contain exactly 23 items (9 + 2·7).")

    prefix = seq[:9]
    suffix = tuple(seq[i:i + 2] for i in range(9, 23, 2))
    return prefix + suffix

############################################################################
#Sarch Bound
def cumulative_deltas(d_pairs: List[Tuple[int, int]]) -> List[int]:
    cum = [0]
    s = 0
    for i in range(4):
        s += d_pairs[i][0] + d_pairs[i][1]
        cum.append(s)
    return cum         # 14 integer values

def search_bound(N,K,Q):
    delta_set=[]
    for t in Q:
        d=split_9_then_pairs(t)[9:]
        cum= cumulative_deltas(d)
        delta=max(cum)-min(cum)
        delta_set.append(delta)
    delta=max(delta_set) #maximum difference of |X_i|-|X_j|
    return N+K-1 +(K-1 )*(N-2+delta)

#############################################################################
Letter    = int                 # 0, 1, or 2 (2 = ε)
ParikhVec = Tuple[int, int]     # for a binary alphabet

def _parikh(block: str) -> ParikhVec:
    """Return (|block|_0, |block|_1)."""
    return block.count("0"), block.count("1")

def _length_constants(D: List[ParikhVec]) -> Tuple[List[int], int]:
    """Return cumulative offsets C_i and their sum."""
    deltas   = [x + y for (x, y) in D]          # Δ_i = d_i·(1,1)^T
    cum      = [0]
    for d in deltas:
        cum.append(cum[-1] + d)
    return cum, sum(cum)

def is_realisation(word: str,
                   template: Sequence[Letter | ParikhVec]
                   ) -> bool:
    """
    True ⇔  `word` is an *exact* realisation of the given 8-template.
    
    Template layout (length 16):
        a₁…a₉  followed by  d₁…d₇
    where aᵢ ∈ {0,1,2} (2 = ε) and dᵢ ∈ ℤ².
    """
    if len(template) != 16:
        raise ValueError("Template must contain 9 letters + 7 vectors = 16 items")
    
    A = list(template[:9])                  # boundary symbols
    D = list(template[9:])                  # Parikh-difference vectors
    k = 8                                   # number of variable blocks
    
    # ----- quick length filter ------------------------------------------------
    s = sum(1 for a in A if a != 2)         # non-ε letters among the nine
    
    cum, offset = _length_constants(D)      # C_i and ΣC_i
    rhs = len(word) - s - offset            # = 8B  in the formula above
    if rhs < 0 or rhs % k:
        return False                        # impossible length
    
    B = rhs // k                            # first block length
    sizes = [B + cum[i] for i in range(k)]  # all eight |X_i|
    if any(sz < 0 for sz in sizes):
        return False                        # some block would be negative
     
    pos = 0
    blocks: List[str] = []
    
    # a₁
    if A[0] != 2:
        if pos >= len(word) or int(word[pos]) != A[0]:
            return False
        pos += 1
    
    # X₁…X₈  +  a₂…a₉
    for i in range(k):
        Xi = word[pos : pos + sizes[i]]
        if len(Xi) != sizes[i]:
            return False                    # ran out of text
        blocks.append(Xi)
        pos += sizes[i]
        
        ai_plus = A[i + 1]
        if ai_plus != 2:
            if pos >= len(word) or int(word[pos]) != ai_plus:
                return False
            pos += 1
    
    if pos != len(word):                    # leftover characters
        return False
    
    # ----- Parikh-difference test --------------------------------------------
    P = [_parikh(x) for x in blocks]
    for i, d in enumerate(D):
        diff = (P[i + 1][0] - P[i][0], P[i + 1][1] - P[i][1])
        if diff != d:
            return False 
    return True

# --- factor finder  ---------------------------------------------------
def find_realising_factors(text: str,
                           template: Tuple[Letter | ParikhVec, ...]
                           ) -> List[Tuple[int, int, str]]:

    A = template[:9]
    D = template[9:]
    k = 8

    # template constants
    s = sum(1 for a in A if a != 2)
    _, offset = _length_constants(D)

    matches: List[Tuple[int, int, str]] = []
    n = len(text)

    #Length of the factor longest -> shortest: it is faster this way for our purposes
    for L in range(n, 0, -1):
        if L < s + offset:            # minimum length check
            continue
        if (L - s - offset) % k:      # if  len ≠ s+offset (mod 8) skip
            continue
        # kaydırmalı pencere
        for start in range(0, n - L + 1):
            factor = text[start:start + L]
            if is_realisation(factor, template):
                matches.append((start, start + L, factor))
    return matches

###########################################################################
# INPUTS
###########################################################################

t1_1=(0,0,1,  0,2,0,  1,0,0,     0,-1,   1,0,  -1,1,  0,0,   1,-1, -1,0,   0,1)
t1_2=(0,0,1,  1,2,0,  1,0,0,     0,-1,   1,0,   0,0,  -1,1,  1,-1, -1,0,   0,1)
t1_3=(0,0,1,  1,2,1,  1,0,0,     0,-1,   1,0,   0,0,  0,0,   0,0,  -1,0,   0,1)
t1_4=(0,0,1,  0,2,1,  1,0,0,     0,-1,   1,0,  -1,1,  1,-1,  0,0,  -1,0,   0,1)
t2_1=(0,0,1,  0,2,0,  1,0,0,     1,0,   -1,0,   1,0,  0,0,  -1,0,  1,0,   -1,0)
t2_2=(0,0,1,  1,2,0,  1,0,0,     1,0,   0,-1,   0,1,  0,0,  -1,0,  1,0,   -1,0)
t2_3=(0,0,1,  1,2,1,  1,0,0,     1,0,   0,-1,   0,1,  0,0,   0,-1, 0,1,   -1,0)
t2_4=(0,0,1,  0,2,1,  1,0,0,     1,0,   -1,0,   1,0,  0,0,   0,-1, 0,1,   -1,0)

t = (n, n, n, n, n, n, n, n, n, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)  # The template for Abelian 8-powers
T=[t1_1,t1_2,t1_3,t1_4,t2_1,t2_2,t2_3,t2_4]    

template_t2_1_grandgrandparent        =  (1, 0, 1, 0, 0, 1, 0, 1, 0,   -1, 0,  1, 0,  -1, 0,     0, 0,    1, 0,    -1, 0,  1, 0)
template_t2_1_grandgrandparent_format =  split_9_then_pairs(template_t2_1_grandgrandparent )

template_t2_1_grandparent             =  (0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, -1, 0, 0, 0, 1, 0, -1, 0, 1, -1)
template_t2_1_grandparent_format      =  split_9_then_pairs(template_t2_1_grandparent)

template_t2_1_mother                  =  (0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, -1, 0, 1, 0, -1, 0, 1, 0)
template_t2_1_mother_format           =  split_9_then_pairs(template_t2_1_mother)

t2_1                                  =  (0,0,1,  0,2,0,  1,0,0,     1,0,   -1,0,   1,0,  0,0,  -1,0,  1,0,   -1,0)
template_t2_1_format                  =  split_9_then_pairs(t2_1)
print('================================================================================================')
print('======================== First Part  ===========================================================')
print('================================================================================================\n')
print('We are now computing all the ancestors of tau:')
Ancestors = ancestors_with_levels(T)
Q= list(Ancestors[-1])
print('In total there are',len(Q),'ancestors.',' \n' )   
print('Now we check if the templates are realized by a factor of length <=Search Bound= N+k-1 +(k-1 )*(N-2+delta)\n')
Search_bound= search_bound(7,k,Q)
print('* Search Bound is computed:', Search_bound, '.\n')

print('================================================================================================')
print('======================== Second Part  ==========================================================')
print('================================================================================================\n')
print('Now, we check the parent relations of t_8, t(2.1), t_mother(2.1), t_gp(2.1)\n')
print('********************************************************************','\n')
print('First, we check that t_mother(2_1) is a parent of t(2.1):')
if template_t2_1_mother in parents(t2_1):
    print('mother template=',template_t2_1_mother_format ,' \n is in parents of t2_1=',template_t2_1_format,'.\n'   )   
print('********************************************************************\n')
print('Then, we check that t_gp(2_1) is a parent of t_mother(2.1):')
if template_t2_1_grandparent in parents(template_t2_1_mother):
    print('grandparent template=',template_t2_1_grandparent_format  ,' \n is in parents of mother template=',template_t2_1_mother_format,'.\n')   
print('********************************************************************\n')
print('Then, we check that t_ggp(2_1) is a parent of t_p(2.1):')
if template_t2_1_grandgrandparent   in parents(template_t2_1_grandparent):
    print('grand grandparent template=',template_t2_1_grandgrandparent_format  ,' \n is in parents of grandparent template=',template_t2_1_grandparent_format,'.\n')
print('********************************************************************\n')
##can take some time
print('Now, we check that t2_1 is a parent of t_8: this can take some time...')
if t2_1 in parents(t):
    print('t2_1=',template_t2_1_format ,' \n is in parents of t_8=', split_9_then_pairs(t) ,'.\n' )

print('=============================================================================================')
print('======================== Third Part  ========================================================')
print('=============================================================================================\n')
print('Now, we check realizations of t(2.1), t_mother(2.1), t_gp(2.1), t_ggp(2.1).\n')
print('********************************************************************','\n')
word_grandgrandparent=applyh_iterative('0',2)
grandgrandparent_check=find_realising_factors( word_grandgrandparent, template_t2_1_grandgrandparent_format )
print('h^2 has a realization of t_ggp(2.1)=',template_t2_1_grandgrandparent_format  )
print('printing: start position, end position, factor itself',grandgrandparent_check[0],'.\n')
print('********************************************************************','\n')
word_grandparent=applyh(word_grandgrandparent[17:30])
grandparent_check=find_realising_factors( word_grandparent, template_t2_1_grandparent_format )
print('h^3 has a realization of t_gp(2.1)=',template_t2_1_grandparent_format  )
print('printing:  factor itself',grandparent_check[0],'.\n')
print('********************************************************************','\n')
word_mother=applyh(word_grandparent[3:78])
mother_check=find_realising_factors( word_mother, template_t2_1_mother_format )
print('h^4 has a realization of t_mother(2.1)=',template_t2_1_mother_format  )
print('printing a part of the factor only:',mother_check[0][2][0:30],'...',mother_check[0][2][-30:-1] ,'.\n')
# uncomment to see the full word:
#print(mother_check[0][2])
print('********************************************************************','\n')
word_t2_1=applyh(word_mother[0:470])
t2_1_check=find_realising_factors( word_t2_1, template_t2_1_format )
print('h^5 has a realization of t(2.1)=',template_t2_1_format  )
print('printing a part of the factor only:',t2_1_check[0][2][0:30] ,'...',t2_1_check[0][2][-30:-1],'.\n')
# uncomment to see the full word:
#print(t2_1_check[0][2])

print('=============================================================================================')
print('======================== Fourth Part  =======================================================')
print('=============================================================================================\n')
word_t8=applyh(word_t2_1[3:2935])
is_avoid, info= avoids_abelian_k_power(word_t8,8)
if not is_avoid and word_t8 in applyh_iterative('0',6): #checks if word_t8 is a factor of h^6('0') and if there is an abelian 8 power
    print('There is an abelian power in h^6(0)')
#uncomment to see the factor
#print(info)
